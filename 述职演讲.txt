大家好，我叫wzp，目前的岗位是c#开发工程师，入职时间是5月21日，所以来佳都已经两个多月了，所以在此进行述职报告，跟各位报告一下我过去两个多月主要做了什么。

我的报告分为四部分，分别是工作回顾，工作体会，自我评价和对未来的规划。

在过去两个月中，我主要参与了线网系统开发和组态技术选型，还有合肥AFC项目。

因为在以前的工作中，我所接触的技术和佳都的有点区别，所以参与线网系统我首先是熟悉了一下项目的代码结构，然后自学了一下项目所用到的框架，如prism、handycontrol等，然后根据斌哥安排的任务，对线网系统增加了一些功能，和修复了一些bug。

这是我对线网系统增加的一个性能监控功能，因为线网得界面是由许多控件组成的，所以其中一个控件加载得太慢，都会导致那个界面加载变慢，会显得卡顿，但是一个个给控件在初始化的时候加日志去监控性能肯定是不好的，因为不方便维护而且把非业务的代码硬耦合到了界面中。因为我们系统用了prism做一个mvvm框架，其中集成了unitycontainer容器，IOC容器一般都有对对象进行集中管理的功能，所以我上github clone 了一下它的代码，找到了prism集中初始化对象的地方，从而覆盖这个方法，实现了在一个地方监控所有控件实例化的功能。

这是我对系统用到的UI框架 handycontrol的应用，给登录加载了一个动画，从而让用户在等待登陆的时候不会那么焦虑。

同时我也修复了一些系统的Bug，如我们线网是使用cefsharp 嵌入h5页面的，但是cefsharp 的属性很多，我们之前用的时候发现cefsharp这个进程在程序关闭后总是无法kill，所以我研究了一下，最后给cefsharp加了一些属性，从而修复了这个bug。还有就像线网中用到的  cctv控件，我通过之前增加的性能检测功能，发现它加载耗时比较长，从而影响了整个界面的加载，所以分析了一下代码，最后把耗时比较长的代码放到了Loaded事件中去做，从而让这个控件加载得更快一点。

接下来是组态选型，因为之前需要做一下组态软件的选型，所以我就对比了一下一些常用组态软件的功能和性能。
主要是对比了一下表格中的这些组态，然后首先根据能实现的功能，排除了一些达不到我们要求的组态，然后对iconics64、WPF、HT对了一下深度对比。

首先我介绍一下iconics64，这是一个六位一体的软件解决方案，主要有六大部分的功能，有3D、SCADA、GIS、VRAR、移动端、IOT物联网，是一个比较全面的软件平台，可以通过拖拉拽来完成一个软件的设计和功能，然后通过他们的客户端，就能直接运行起来。
我主要是用iconics64实现了一下线网，从而了解了这个软件的怎么把一个程序从设计到接入数据到最后发布整套流程的实现。

这个软件设计界面是通过这个套件中的 genesis 64 来设计的，通过拖拉拽来完成界面的布局，界面的跳转逻辑、预览等、控件事件和数据源的绑定等等，然后通过workbench来进行数据源的发布和程序的发布和部署。

我首先通过svg图片导入形成整个线网，再给每个站点绑定动画，再给每个小车绑定动画，最后绑定接口，就实现了每个站点颜色的动态变化和小车的移动。

这是我写了个webapi来模拟后端数据，和通过workbench发布设计的软件。

这个iconics64我使用下来发现，这个软件的优势主要是使用门槛很低，我这次设计的线网没有写到一行代码，全都是通过拖拉拽完成，可以达到所见所得的效果，同时这个软件功能很齐全，2D3DGISBSCS移动端都是支持的，所以一般需要的功能他都有，可以说是一个挺好用的软件了。
但是这个软件不太适合我们的项目，因为我在用的过程中发现，首先这个软件拖拉拽是优点，但是如果界面复杂也是缺点，工作量特别大，不能想写代码一样通过抽象的方式，轻松复用，所以也不利于后续的迭代和维护，容易出Bug，另一个就是这个多端支持，其实是有缺陷的，首先技术必须用他们那一套，必须用他们的客户端，不能直接嵌入到我们的客户端中，所以集成比较困难，同时BS必须使用IE客户端，而且他们使用的技术是xbap，这种技术是已经被抛弃的技术，有非常多的缺陷，比如说界面支持不全，再chrome中无法使用，ie9之后要加载这种程序必须手动配置信任站点等等。

同时我也使用WPF实现了一下线网，主要是当心线网如果在界面很复杂的情况下，web实现可能会有一定的性能问题，所以用wpf试着实现了一些效果对比看看。
这个也是首先通过将svg转化成线网，然后通过路径动画等功能来实现整个线网的效果。
