using System;
using System.Collections.Generic;
using System.Text;

namespace DesignPattern.PatternCategory
{
    /// <summary>
    /// 包装模式
    /// 通过委托的方式，对一个对象或者一系列对象进行包装，从而使系统更稳定、更具备扩展性。
    /// 装饰模式、适配器模式、门面模式、代理模式、桥梁模式。
    ///
    /// 代理模式：
    /// - 主要用在不希望暴露对象内部细节的场景，或者对对象的访问需要限制的场景。
    ///
    /// 装饰模式：
    /// - 一个特殊的代理模式，旨在在不改变接口的前提下，为对象增加功能。
    ///
    /// 适配器模式：
    /// - 旨在接口转换。把一个对象或者系统的接口转换成另一个对象或者系统期望的接口。
    ///
    /// 门面模式：
    /// - 提供为外部系统一个子系统粗粒度接口，没有任何业务逻辑，仅仅是一个访问负责系统的快速通道。
    ///
    /// - 桥梁模式：
    /// - 旨在解决自行扩展的问题，通过两个抽象层的耦合，把两个实现层分离，从而可以互相独立变化。
    /// 
    /// </summary>
    class WrappingPattern
    {
    }
}
