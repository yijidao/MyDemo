using System;
using System.Collections.Generic;
using System.Text;

namespace DesignPattern.PatternCategory
{
    /// <summary>
    /// 行为类模式
    /// 行为类模式关注如果管理对象的行为。
    /// 责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式、访问者模式。
    ///
    /// 命令模式和策略模式
    /// 相同点：
    /// - 都是通过 Context 角色封装一个具体行为，两种模式都是提供了封装的方法。
    /// 不同点：
    /// - 关注点不同：
    ///   - 策略模式是将行为封装成一个算法，一个算法就是一个原子业务逻辑，让客户端自由地更换算法。关注的是算法的完整性、封装性，只有满足了这两个条件，才能包装其自由切换。
    ///   - 命令模式将行为拆分成命令角色、接收者角色、请求者角色。关注的是解耦问题，如果让请求者和执行者解耦，才是命令模式首要考虑的问题。解耦的方式就是将请求者拆分成一个个命令，由接收者执行。
    ///     由于拆分成了命令，所以可以对命令做各种处理，如撤销、记录。
    /// - 角色不同：
    ///   - 策略模式中的抽象策略角色和具体策略角色与命令模式的接收者角色类似，但是职责不同。
    ///     策略模式中的策略角色，是一个原子业务逻辑，负责一个完整的算法逻辑，是不可再拆分的单元，一旦变更就是对整个策略的变更。
    ///     命令者模式中的接收者角色只对接收的命令族负责，变更了接收者的逻辑，只是影响到其能接收的抽象命令和具体命令，对它的修改不会扩散到其他系统中。
    /// - 使用场景不同：
    ///   - 策略模式适用于要求算法变更的场景。
    ///   - 命令模式适用于解耦两个有紧耦合关系的对象或者多命令撤销的场景。
    /// 
    /// 策略模式和状态模式：
    /// 相同点：
    /// - 都是通过 Context 角色封装一个具体的行为，两种模式都提供了封装的方法。
    /// 不同点：
    /// - 上下文（Context）角色职责不同：
    ///   - 策略模式的 Context 的职责只有一个委托功能，负责算法的替换。
    ///   - 状态模式的 Context 的职责不仅有委托功能，还有记录状态的功能，从而实现在切换状态的时候，行为随之改变。
    /// - 解决的问题重点不同：
    ///   - 策略模式旨在解决内部算法如何变换的问题，也就是保证算法自由切换并且对外界影响最小。
    ///   - 状态模式旨在解决状态变化从而改变行为的问题。出发点是状态，封装状态而暴露行为，变更状态的时候，在外界看起来就像变更行为。
    /// - 解决问题的方式不同：
    ///   - 策略模式只保证算法可以切换，但是切换成什么算法，策略模式无法控制。
    ///   - 状态模式只是对外暴露行为，然后状态的变化是通过具体状态角色和 Context 角色来实现的，可以控制下一个状态是什么。
    /// - 应用场景不同：
    ///   - 策略模式中的算法，是没有状态的，是一个原则业务逻辑，只是一个行为。
    ///   - 状态模式中的状态，必须同时具备状态和行为，Context 角色通过状态变化切换行为。
    /// - 复杂度不同：
    ///   - 策略模式简单，也好扩展，状态模式涉及到状态切换，状态一多，很复杂。
    ///
    /// 观察者模式和责任链模式：
    /// 相同点：
    /// - 都具备链式结构。观察者模式中的对象可以同时实现 IObservable 和 IObserver，这样这个对象在观察者模式中就变成一个节点，从而形成了触发链。
    ///
    /// 不同点：
    /// - 链中的消息不同：
    ///   - 责任链从链首到链尾，消息都是同一个，不会有变化的。
    ///   - 触发链只要求相连节点的消息对象相对固定，其他节点的消息则不会要求，所以消息在链中传播的时候，整个消息的结构都可能变化。
    /// - 上下节点关系不同：
    ///   - 责任链的各个节点都没什么关系，消息只是在本节点判断，如果处理不了，就传给链中的下一个节点，下一个节点是什么，本节点并不关心。
    ///   - 触发链中的相邻节点关系紧密。上下级节点彼此信任，也只在彼此间关联，不能随便更改位置，因为不同节点间的消息结构可能完全不一样。
    /// - 消息的分销渠道不同：
    ///   - 责任链的消息从链首进来，一直跑到链尾，方向是单一的、固定的。
    ///   - 触发链的消息可能以广播模式传播，也可能以跳跃模式传播。
    /// 
    /// </summary>
    class BehavioralPatterns
    {
    }
}
