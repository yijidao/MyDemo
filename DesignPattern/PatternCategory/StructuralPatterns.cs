using System;
using System.Collections.Generic;
using System.Text;

namespace DesignPattern.PatternCategory
{
    /// <summary>
    /// 结构类模式
    /// 结构类模式关注如何建立一个软件结构。
    /// 包括适配器模式、桥梁模式、组合模式、装饰模式、门面模式、享元模式、代理模式。
    /// 因为它们都是通过组合类或对象产生更大的结构以适应更高层次的逻辑需求，所以叫结构类模式。
    ///
    /// 代理模式和装饰者模式
    ///   - 代理模式注重的时候对被代理类的控制，比如增加审计等功能，最终执行的方法，还是原汁原味被代理类的方法。
    ///   - 装饰者模式注重的时候对源对象的强化，不会去传参、返回值进行检查，最终执行的方法是强化后的方法。
    ///   - 装饰者模式和代理模式非常相似，可以说，装饰者模式就是一种特殊的代理模式。
    ///   - 都是提供一种方式，用来替代继承，来扩展子类的功能。
    ///
    /// 装饰模式和适配器模式
    ///   - 适配器模式主要工作是转换，可以通过组合或继承的方式实现。适配之后的对象，跟源对象是 has-a 的关系。
    ///   - 适配器模式主要用于投产系统，在设计时一般不考虑。
    ///   - 装饰模式的主要工作是强化，装饰之后跟源对象还是 is-a 的关系。
    ///   - 相同点都是包装功能，通过委托的方式来实现功能。
    /// 
    /// </summary>
    class StructuralPatterns
    {
    }

    #region 代理模式和装饰者模式

    

    #endregion
}
